import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

// Paquete controller:
class ConsultasController {
    private ProyectoBancoDao proyectoBancoDao;
    private PagadoPorProyectoDao pagadoPorProyectoDao;
    private ComprasDeLiderDao comprasDeLiderDao;

    public ConsultasController() {
        proyectoBancoDao = new ProyectoBancoDao();
        pagadoPorProyectoDao = new PagadoPorProyectoDao();
        comprasDeLiderDao = new ComprasDeLiderDao();
    }

    public List<ProyectoBancoVo> listaProyectoBanco(String banco) throws SQLException {
        return proyectoBancoDao.consultaProyectoBanco(banco);
    }

    public List<PagadoPorProyectoVo> listaPagadoPorProyecto(Double limiteInferior) throws SQLException {
        return pagadoPorProyectoDao.consultaPagadoPorProyecto(limiteInferior);
    }

    public List<ComprasDeLiderVo> listaComprasDeLider() throws SQLException {
        return comprasDeLiderDao.consultaComprasDelLider();
    }
}
// Paquete model.dao:
class ComprasDeLiderDao {
    public List<ComprasDeLiderVo> consultaComprasDelLider() throws SQLException {
        List<ComprasDeLiderVo> listado = new ArrayList<>();
        var conectar = JDBCUtilities.getConnection();
        PreparedStatement sentencia = null;
        ResultSet resultado = null;
        try {
            var consulta = "SELECT (l.Nombre || ' ' || l.Primer_Apellido || ' ' || l.Segundo_Apellido) "
                + "AS LIDER, SUM(c.Cantidad*mc.Precio_Unidad) AS VALOR "
                + "FROM Proyecto p "
                + "INNER JOIN Compra c ON c.ID_Proyecto = p.ID_Proyecto "
                + "INNER JOIN MaterialConstruccion mc ON mc.ID_MaterialConstruccion = "
                + "c.ID_MaterialConstruccion "
                + "INNER JOIN Lider l ON l.ID_Lider = p.ID_Lider "
                + "GROUP BY LIDER "
                + "ORDER BY VALOR "
                + "LIMIT 10";

            sentencia = conectar.prepareStatement(consulta);
            resultado = sentencia.executeQuery();

            while (resultado.next()) {
                var datosVo = new ComprasDeLiderVo();
                datosVo.setLider(resultado.getString("LIDER"));
                datosVo.setValor(resultado.getDouble("VALOR"));
                listado.add(datosVo);
            }
        } finally {
            if (resultado != null) {
                resultado.close();
            }
            if (sentencia != null) {
                sentencia.close();
            }
            if (conectar != null) {
                conectar.close();
            }
        }
        return listado;
    }   
}
//------------------------------------------------------
class PagadoPorProyectoDao {
    public List<PagadoPorProyectoVo> consultaPagadoPorProyecto(Double limiteInferior) throws SQLException {
        List<PagadoPorProyectoVo> listado = new ArrayList<>();

        var conectar = JDBCUtilities.getConnection();
        PreparedStatement sentencia = null;
        ResultSet resultado = null;
        try {
            var consulta = "SELECT	p.ID_Proyecto ID, SUM(c.Cantidad*mc.Precio_Unidad) AS VALOR " 
                + "FROM Proyecto p "
                + "INNER JOIN Compra c ON c.ID_Proyecto = p.ID_Proyecto "
                + "INNER JOIN MaterialConstruccion mc ON mc.ID_MaterialConstruccion = " 
                + "c.ID_MaterialConstruccion "
                + "WHERE c.Pagado = 'Si' "
                + "GROUP BY p.ID_Proyecto "
                + "HAVING SUM(c.Cantidad * mc.Precio_Unidad) > ? "
                + "ORDER BY VALOR DESC";

                sentencia = conectar.prepareStatement(consulta);
                sentencia.setDouble(1, limiteInferior);
                resultado = sentencia.executeQuery();
                
                while (resultado.next()) {
                    var datosVo = new PagadoPorProyectoVo();
                    datosVo.setId(resultado.getInt("ID"));
                    datosVo.setValor(resultado.getDouble("VALOR"));
                    listado.add(datosVo);
                }
            } finally {
                if (resultado != null) {
                    resultado.close();
                }
                if (sentencia != null) {
                    sentencia.close();
                }
                if (conectar != null) {
                    conectar.close();
                }
            }
        return listado;
    }
}
//------------------------------------------------------------
class ProyectoBancoDao {

    public List<ProyectoBancoVo> consultaProyectoBanco(String banco) throws SQLException {
        List<ProyectoBancoVo> listado = new ArrayList<>();

        var conectar = JDBCUtilities.getConnection();
        PreparedStatement sentencia = null;
        ResultSet resultado = null;
        try {
            var consulta = "SELECT p.ID_Proyecto ID, p.Constructora, p.Ciudad, p.Clasificacion, t.Estrato,"
                       + " (l.Nombre || ' ' || l.Primer_Apellido || ' ' || l.Segundo_Apellido) AS LIDER "
                + "FROM Proyecto p "
                + "INNER JOIN Tipo t ON t.ID_Tipo = p.ID_Tipo "
                + "INNER JOIN Lider l ON l.ID_Lider = p.ID_Lider "
                + "WHERE p.Banco_Vinculado = ? "
                + "ORDER BY p.Fecha_Inicio DESC, p.Ciudad ASC, p.Constructora";

                sentencia = conectar.prepareStatement(consulta);
                sentencia.setString(1, banco);
                resultado = sentencia.executeQuery();
                
                while (resultado.next()) {
                    var datosVo = new ProyectoBancoVo();
                    datosVo.setId(resultado.getInt("ID"));
                    datosVo.setConstructora(resultado.getString("CONSTRUCTORA"));
                    datosVo.setCiudad(resultado.getString("CIUDAD"));
                    datosVo.setClasificacion(resultado.getString("CLASIFICACION"));
                    datosVo.setEstrato(resultado.getInt("ESTRATO"));
                    datosVo.setLider(resultado.getString("LIDER"));
                    listado.add(datosVo);
                }
            } finally {
                if (resultado != null) {
                    resultado.close();
                }
                if (sentencia != null) {
                    sentencia.close();
                }
                if (conectar != null) {
                    conectar.close();
                }
            }
        return listado;
    }
}
// Paquete model.vo:
class ComprasDeLiderVo {
    private String lider;
    private Double valor;
    
    public String getLider() {
        return lider;
    }
    public void setLider(String lider) {
        this.lider = lider;
    }
    public Double getValor() {
        return valor;
    }
    public void setValor(Double valor) {
        this.valor = valor;
    }
    @Override
    public String toString() {
        return "ComprasDeLiderVo [lider=" + lider + ", valor=" + valor + "]";
    }
}
//------------------------------------------------
class PagadoPorProyectoVo {
    private Integer id;
    private Double valor;
    
    public Integer getId() {
        return id;
    }
    public void setId(Integer id) {
        this.id = id;
    }
    public Double getValor() {
        return valor;
    }
    public void setValor(Double valor) {
        this.valor = valor;
    }
    @Override
    public String toString() {
        return "PagadoPorProyectoVo [id=" + id + ", valor=" + valor + "]";
    }
}
//-------------------------------------------------
class ProyectoBancoVo {
    private Integer id;
    private String constructora;
    private String ciudad;
    private String clasificacion;
    private Integer estrato;
    private String lider;

    public Integer getId() {
        return id;
    }
    public void setId(Integer id) {
        this.id = id;
    }
    public String getConstructora() {
        return constructora;
    }
    public void setConstructora(String constructora) {
        this.constructora = constructora;
    }
    public String getCiudad() {
        return ciudad;
    }
    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }
    public String getClasificacion() {
        return clasificacion;
    }
    public void setClasificacion(String clasificacion) {
        this.clasificacion = clasificacion;
    }
    public Integer getEstrato() {
        return estrato;
    }
    public void setEstrato(Integer estrato) {
        this.estrato = estrato;
    }
    public String getLider() {
        return lider;
    }
    public void setLider(String lider) {
        this.lider = lider;
    }
    @Override
    public String toString() {
        return "ProyectoBancoVo [id=" + id + ", constructora= " + constructora + ", ciudad=" + ciudad + ", clasificacion=" + clasificacion +  ", estrato=" + estrato + ",  lider=" + lider + "]";
    }
}
// Paquete util:
class JDBCUtilities {
    // Atributos de clase para gestión de conexión con la base de datos 
    private static final String UBICACION_BD = "ProyectosConstruccion.db"; 
    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:" + UBICACION_BD; 
        return DriverManager.getConnection(url);
    }
}
// Paquete view:
class ReportesView {
    private ConsultasController consultasController;

    public ReportesView() {
        consultasController = new ConsultasController();        
    }

    private String repitaCaracter(Character caracter, Integer veces) { 
        var respuesta = ""; 
        for (int i = 0; i < veces; i++) {
            respuesta += caracter; 
        } 
        return respuesta;
    } 

    public void proyectosFinanciadosPorBanco(String banco) {
        try {
            System.out.println(repitaCaracter('=', 36) + " LISTADO DE PROYECTOS POR BANCO " + repitaCaracter('=', 37)); 
            if (banco != null && !banco.isBlank()) { 
                System.out.println(String.format("%3s %-25s %-20s %-15s %-7s %-30s", "ID",
                    "CONSTRUCTORA", "CIUDAD", "CLASIFICACION", "ESTRATO", "LIDER")); 
                System.out.println(repitaCaracter('-', 105));
            }
            var lista = consultasController.listaProyectoBanco(banco);
            for (ProyectoBancoVo proyecto : lista) {
                System.out.printf("%3d %-25s %-20s %-15s %7d %-30s %n", proyecto.getId(), 
                    proyecto.getConstructora(), proyecto.getCiudad(), proyecto.getClasificacion(),
                    proyecto.getEstrato(), proyecto.getLider());
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        } 
    } 

    public void totalPagadoPorProyectosSuperioresALimite(Double limiteInferior) { 
        try {
            System.out.println(repitaCaracter('=', 1) + " TOTAL PAGADO POR PROYECTO " + 
            repitaCaracter('=', 1)); 
            if (limiteInferior != null) {
                System.out.println(String.format("%3s %15s", "ID", "VALOR  ")); 
                System.out.println(repitaCaracter('-', 29)); 
            } 
            var lista = consultasController.listaPagadoPorProyecto(limiteInferior);
            for (PagadoPorProyectoVo proyecto : lista) {
                System.out.printf("%3d %,15.1f %n", proyecto.getId(), proyecto.getValor());
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    } 

    public void lideresQueMenosGastan() {
        try {
            System.out.println(repitaCaracter('=', 5) + " 10 LIDERES MENOS COMPRADORES " + 
            repitaCaracter('=', 6)); 
            System.out.println(String.format("%-25s %15s", "LIDER", "VALOR  ")); 
            System.out.println(repitaCaracter('-', 41)); 
            var lista = consultasController.listaComprasDeLider();
            for (ComprasDeLiderVo proyecto : lista) {
                System.out.printf("%-25s %,15.1f %n", proyecto.getLider(), proyecto.getValor());
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    } 
}